// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: configuration.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createConfiguration = `-- name: CreateConfiguration :one
INSERT INTO configurations (
    charge_point_id,
    key, 
    readonly,
    value,
    created_at,
    updated_at
  ) VALUES ($1, $2, $3, $4, $5, $6)
  RETURNING id, charge_point_id, key, readonly, value, created_at, updated_at
`

type CreateConfigurationParams struct {
	ChargePointID int64          `db:"charge_point_id" json:"chargePointID"`
	Key           string         `db:"key" json:"key"`
	Readonly      bool           `db:"readonly" json:"readonly"`
	Value         sql.NullString `db:"value" json:"value"`
	CreatedAt     time.Time      `db:"created_at" json:"createdAt"`
	UpdatedAt     time.Time      `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) CreateConfiguration(ctx context.Context, arg CreateConfigurationParams) (Configuration, error) {
	row := q.db.QueryRowContext(ctx, createConfiguration,
		arg.ChargePointID,
		arg.Key,
		arg.Readonly,
		arg.Value,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Configuration
	err := row.Scan(
		&i.ID,
		&i.ChargePointID,
		&i.Key,
		&i.Readonly,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConfiguration = `-- name: GetConfiguration :one
SELECT id, charge_point_id, key, readonly, value, created_at, updated_at FROM configurations
  WHERE id = $1
`

func (q *Queries) GetConfiguration(ctx context.Context, id int64) (Configuration, error) {
	row := q.db.QueryRowContext(ctx, getConfiguration, id)
	var i Configuration
	err := row.Scan(
		&i.ID,
		&i.ChargePointID,
		&i.Key,
		&i.Readonly,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConfigurationByKey = `-- name: GetConfigurationByKey :one
SELECT id, charge_point_id, key, readonly, value, created_at, updated_at FROM configurations
  WHERE charge_point_id = $1 AND key = $2
`

type GetConfigurationByKeyParams struct {
	ChargePointID int64  `db:"charge_point_id" json:"chargePointID"`
	Key           string `db:"key" json:"key"`
}

func (q *Queries) GetConfigurationByKey(ctx context.Context, arg GetConfigurationByKeyParams) (Configuration, error) {
	row := q.db.QueryRowContext(ctx, getConfigurationByKey, arg.ChargePointID, arg.Key)
	var i Configuration
	err := row.Scan(
		&i.ID,
		&i.ChargePointID,
		&i.Key,
		&i.Readonly,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listConfigurations = `-- name: ListConfigurations :many
SELECT id, charge_point_id, key, readonly, value, created_at, updated_at FROM configurations
  WHERE charge_point_id = $1
  ORDER BY id
`

func (q *Queries) ListConfigurations(ctx context.Context, chargePointID int64) ([]Configuration, error) {
	rows, err := q.db.QueryContext(ctx, listConfigurations, chargePointID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Configuration
	for rows.Next() {
		var i Configuration
		if err := rows.Scan(
			&i.ID,
			&i.ChargePointID,
			&i.Key,
			&i.Readonly,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConfiguration = `-- name: UpdateConfiguration :one
UPDATE configurations SET (
    value,
    updated_at
  ) = ($2, $3)
  WHERE id = $1
  RETURNING id, charge_point_id, key, readonly, value, created_at, updated_at
`

type UpdateConfigurationParams struct {
	ID        int64          `db:"id" json:"id"`
	Value     sql.NullString `db:"value" json:"value"`
	UpdatedAt time.Time      `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) UpdateConfiguration(ctx context.Context, arg UpdateConfigurationParams) (Configuration, error) {
	row := q.db.QueryRowContext(ctx, updateConfiguration, arg.ID, arg.Value, arg.UpdatedAt)
	var i Configuration
	err := row.Scan(
		&i.ID,
		&i.ChargePointID,
		&i.Key,
		&i.Readonly,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

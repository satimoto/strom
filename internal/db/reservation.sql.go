// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: reservation.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservations (
    connector_id,
    charge_point_id,
    req_id,
    expiry_date,
    status,
    id_tag,
    parent_id_tag,
    created_at,
    updated_at
  ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
  RETURNING id, connector_id, charge_point_id, req_id, expiry_date, status, id_tag, parent_id_tag, created_at, updated_at
`

type CreateReservationParams struct {
	ConnectorID   int32             `db:"connector_id" json:"connectorID"`
	ChargePointID int64             `db:"charge_point_id" json:"chargePointID"`
	ReqID         string            `db:"req_id" json:"reqID"`
	ExpiryDate    time.Time         `db:"expiry_date" json:"expiryDate"`
	Status        ReservationStatus `db:"status" json:"status"`
	IDTag         string            `db:"id_tag" json:"idTag"`
	ParentIDTag   sql.NullString    `db:"parent_id_tag" json:"parentIDTag"`
	CreatedAt     time.Time         `db:"created_at" json:"createdAt"`
	UpdatedAt     time.Time         `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, createReservation,
		arg.ConnectorID,
		arg.ChargePointID,
		arg.ReqID,
		arg.ExpiryDate,
		arg.Status,
		arg.IDTag,
		arg.ParentIDTag,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.ConnectorID,
		&i.ChargePointID,
		&i.ReqID,
		&i.ExpiryDate,
		&i.Status,
		&i.IDTag,
		&i.ParentIDTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReservation = `-- name: GetReservation :one
SELECT id, connector_id, charge_point_id, req_id, expiry_date, status, id_tag, parent_id_tag, created_at, updated_at FROM reservations
  WHERE id = $1
`

func (q *Queries) GetReservation(ctx context.Context, id int64) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservation, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.ConnectorID,
		&i.ChargePointID,
		&i.ReqID,
		&i.ExpiryDate,
		&i.Status,
		&i.IDTag,
		&i.ParentIDTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReservationByReqID = `-- name: GetReservationByReqID :one
SELECT id, connector_id, charge_point_id, req_id, expiry_date, status, id_tag, parent_id_tag, created_at, updated_at FROM reservations
  WHERE req_id = $1
`

func (q *Queries) GetReservationByReqID(ctx context.Context, reqID string) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservationByReqID, reqID)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.ConnectorID,
		&i.ChargePointID,
		&i.ReqID,
		&i.ExpiryDate,
		&i.Status,
		&i.IDTag,
		&i.ParentIDTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listReservations = `-- name: ListReservations :many
SELECT id, connector_id, charge_point_id, req_id, expiry_date, status, id_tag, parent_id_tag, created_at, updated_at FROM reservations
  ORDER BY id
`

func (q *Queries) ListReservations(ctx context.Context) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, listReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.ConnectorID,
			&i.ChargePointID,
			&i.ReqID,
			&i.ExpiryDate,
			&i.Status,
			&i.IDTag,
			&i.ParentIDTag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :one
UPDATE reservations SET (
    status,
    updated_at
  ) = ($2, $3)
  WHERE id = $1
  RETURNING id, connector_id, charge_point_id, req_id, expiry_date, status, id_tag, parent_id_tag, created_at, updated_at
`

type UpdateReservationParams struct {
	ID        int64             `db:"id" json:"id"`
	Status    ReservationStatus `db:"status" json:"status"`
	UpdatedAt time.Time         `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, updateReservation, arg.ID, arg.Status, arg.UpdatedAt)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.ConnectorID,
		&i.ChargePointID,
		&i.ReqID,
		&i.ExpiryDate,
		&i.Status,
		&i.IDTag,
		&i.ParentIDTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

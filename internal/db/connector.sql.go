// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: connector.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createConnector = `-- name: CreateConnector :one
INSERT INTO connectors (
    connector_id,
    charge_point_id,
    error_code,
    status,
    info,
    vendor_id,
    vendor_error_code,
    created_at,
    updated_at
  ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
  RETURNING id, connector_id, charge_point_id, error_code, status, info, vendor_id, vendor_error_code, created_at, updated_at
`

type CreateConnectorParams struct {
	ConnectorID     int32                `db:"connector_id" json:"connectorID"`
	ChargePointID   int64                `db:"charge_point_id" json:"chargePointID"`
	ErrorCode       ChargePointErrorCode `db:"error_code" json:"errorCode"`
	Status          ConnectorStatus      `db:"status" json:"status"`
	Info            sql.NullString       `db:"info" json:"info"`
	VendorID        sql.NullString       `db:"vendor_id" json:"vendorID"`
	VendorErrorCode sql.NullString       `db:"vendor_error_code" json:"vendorErrorCode"`
	CreatedAt       time.Time            `db:"created_at" json:"createdAt"`
	UpdatedAt       time.Time            `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) CreateConnector(ctx context.Context, arg CreateConnectorParams) (Connector, error) {
	row := q.db.QueryRowContext(ctx, createConnector,
		arg.ConnectorID,
		arg.ChargePointID,
		arg.ErrorCode,
		arg.Status,
		arg.Info,
		arg.VendorID,
		arg.VendorErrorCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.ConnectorID,
		&i.ChargePointID,
		&i.ErrorCode,
		&i.Status,
		&i.Info,
		&i.VendorID,
		&i.VendorErrorCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConnector = `-- name: GetConnector :one
SELECT id, connector_id, charge_point_id, error_code, status, info, vendor_id, vendor_error_code, created_at, updated_at FROM connectors
  WHERE id = $1
`

func (q *Queries) GetConnector(ctx context.Context, id int64) (Connector, error) {
	row := q.db.QueryRowContext(ctx, getConnector, id)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.ConnectorID,
		&i.ChargePointID,
		&i.ErrorCode,
		&i.Status,
		&i.Info,
		&i.VendorID,
		&i.VendorErrorCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConnectorByConnectorID = `-- name: GetConnectorByConnectorID :one
SELECT id, connector_id, charge_point_id, error_code, status, info, vendor_id, vendor_error_code, created_at, updated_at FROM connectors
  WHERE charge_point_id = $1 AND connector_id = $2
`

type GetConnectorByConnectorIDParams struct {
	ChargePointID int64 `db:"charge_point_id" json:"chargePointID"`
	ConnectorID   int32 `db:"connector_id" json:"connectorID"`
}

func (q *Queries) GetConnectorByConnectorID(ctx context.Context, arg GetConnectorByConnectorIDParams) (Connector, error) {
	row := q.db.QueryRowContext(ctx, getConnectorByConnectorID, arg.ChargePointID, arg.ConnectorID)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.ConnectorID,
		&i.ChargePointID,
		&i.ErrorCode,
		&i.Status,
		&i.Info,
		&i.VendorID,
		&i.VendorErrorCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listConnectors = `-- name: ListConnectors :many
SELECT id, connector_id, charge_point_id, error_code, status, info, vendor_id, vendor_error_code, created_at, updated_at FROM connectors
  WHERE charge_point_id = $1
  ORDER BY connector_id
`

func (q *Queries) ListConnectors(ctx context.Context, chargePointID int64) ([]Connector, error) {
	rows, err := q.db.QueryContext(ctx, listConnectors, chargePointID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Connector
	for rows.Next() {
		var i Connector
		if err := rows.Scan(
			&i.ID,
			&i.ConnectorID,
			&i.ChargePointID,
			&i.ErrorCode,
			&i.Status,
			&i.Info,
			&i.VendorID,
			&i.VendorErrorCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConnector = `-- name: UpdateConnector :one
UPDATE connectors SET (
    error_code,
    status,
    info,
    vendor_id,
    vendor_error_code,
    updated_at
  ) = ($2, $3, $4, $5, $6, $7)
  WHERE id = $1
  RETURNING id, connector_id, charge_point_id, error_code, status, info, vendor_id, vendor_error_code, created_at, updated_at
`

type UpdateConnectorParams struct {
	ID              int64                `db:"id" json:"id"`
	ErrorCode       ChargePointErrorCode `db:"error_code" json:"errorCode"`
	Status          ConnectorStatus      `db:"status" json:"status"`
	Info            sql.NullString       `db:"info" json:"info"`
	VendorID        sql.NullString       `db:"vendor_id" json:"vendorID"`
	VendorErrorCode sql.NullString       `db:"vendor_error_code" json:"vendorErrorCode"`
	UpdatedAt       time.Time            `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) UpdateConnector(ctx context.Context, arg UpdateConnectorParams) (Connector, error) {
	row := q.db.QueryRowContext(ctx, updateConnector,
		arg.ID,
		arg.ErrorCode,
		arg.Status,
		arg.Info,
		arg.VendorID,
		arg.VendorErrorCode,
		arg.UpdatedAt,
	)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.ConnectorID,
		&i.ChargePointID,
		&i.ErrorCode,
		&i.Status,
		&i.Info,
		&i.VendorID,
		&i.VendorErrorCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

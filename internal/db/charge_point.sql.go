// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: charge_point.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createChargePoint = `-- name: CreateChargePoint :one
INSERT INTO charge_points (
    identity,
    model, 
    vendor,
    serial_number,
    firmware_verion,
    modem_iccid,
    modem_imsi,
    meter_serial_number,
    meter_type,
    status,
    password,
    created_at,
    updated_at
  ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
  RETURNING id, identity, model, vendor, serial_number, firmware_verion, modem_iccid, modem_imsi, meter_serial_number, meter_type, created_at, updated_at, status, password
`

type CreateChargePointParams struct {
	Identity          string            `db:"identity" json:"identity"`
	Model             string            `db:"model" json:"model"`
	Vendor            string            `db:"vendor" json:"vendor"`
	SerialNumber      sql.NullString    `db:"serial_number" json:"serialNumber"`
	FirmwareVerion    sql.NullString    `db:"firmware_verion" json:"firmwareVerion"`
	ModemIccid        sql.NullString    `db:"modem_iccid" json:"modemIccid"`
	ModemImsi         sql.NullString    `db:"modem_imsi" json:"modemImsi"`
	MeterSerialNumber sql.NullString    `db:"meter_serial_number" json:"meterSerialNumber"`
	MeterType         sql.NullString    `db:"meter_type" json:"meterType"`
	Status            ChargePointStatus `db:"status" json:"status"`
	Password          []byte            `db:"password" json:"password"`
	CreatedAt         time.Time         `db:"created_at" json:"createdAt"`
	UpdatedAt         time.Time         `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) CreateChargePoint(ctx context.Context, arg CreateChargePointParams) (ChargePoint, error) {
	row := q.db.QueryRowContext(ctx, createChargePoint,
		arg.Identity,
		arg.Model,
		arg.Vendor,
		arg.SerialNumber,
		arg.FirmwareVerion,
		arg.ModemIccid,
		arg.ModemImsi,
		arg.MeterSerialNumber,
		arg.MeterType,
		arg.Status,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ChargePoint
	err := row.Scan(
		&i.ID,
		&i.Identity,
		&i.Model,
		&i.Vendor,
		&i.SerialNumber,
		&i.FirmwareVerion,
		&i.ModemIccid,
		&i.ModemImsi,
		&i.MeterSerialNumber,
		&i.MeterType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Password,
	)
	return i, err
}

const getChargePoint = `-- name: GetChargePoint :one
SELECT id, identity, model, vendor, serial_number, firmware_verion, modem_iccid, modem_imsi, meter_serial_number, meter_type, created_at, updated_at, status, password FROM charge_points
  WHERE id = $1
`

func (q *Queries) GetChargePoint(ctx context.Context, id int64) (ChargePoint, error) {
	row := q.db.QueryRowContext(ctx, getChargePoint, id)
	var i ChargePoint
	err := row.Scan(
		&i.ID,
		&i.Identity,
		&i.Model,
		&i.Vendor,
		&i.SerialNumber,
		&i.FirmwareVerion,
		&i.ModemIccid,
		&i.ModemImsi,
		&i.MeterSerialNumber,
		&i.MeterType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Password,
	)
	return i, err
}

const getChargePointByIdentity = `-- name: GetChargePointByIdentity :one
SELECT id, identity, model, vendor, serial_number, firmware_verion, modem_iccid, modem_imsi, meter_serial_number, meter_type, created_at, updated_at, status, password FROM charge_points
  WHERE identity = $1
`

func (q *Queries) GetChargePointByIdentity(ctx context.Context, identity string) (ChargePoint, error) {
	row := q.db.QueryRowContext(ctx, getChargePointByIdentity, identity)
	var i ChargePoint
	err := row.Scan(
		&i.ID,
		&i.Identity,
		&i.Model,
		&i.Vendor,
		&i.SerialNumber,
		&i.FirmwareVerion,
		&i.ModemIccid,
		&i.ModemImsi,
		&i.MeterSerialNumber,
		&i.MeterType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Password,
	)
	return i, err
}

const listChargePoints = `-- name: ListChargePoints :many
SELECT id, identity, model, vendor, serial_number, firmware_verion, modem_iccid, modem_imsi, meter_serial_number, meter_type, created_at, updated_at, status, password FROM charge_points
  ORDER BY id
`

func (q *Queries) ListChargePoints(ctx context.Context) ([]ChargePoint, error) {
	rows, err := q.db.QueryContext(ctx, listChargePoints)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChargePoint
	for rows.Next() {
		var i ChargePoint
		if err := rows.Scan(
			&i.ID,
			&i.Identity,
			&i.Model,
			&i.Vendor,
			&i.SerialNumber,
			&i.FirmwareVerion,
			&i.ModemIccid,
			&i.ModemImsi,
			&i.MeterSerialNumber,
			&i.MeterType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChargePoint = `-- name: UpdateChargePoint :one
UPDATE charge_points SET (
    model, 
    vendor,
    serial_number,
    firmware_verion,
    modem_iccid,
    modem_imsi,
    meter_serial_number,
    meter_type,
    status,
    password,
    updated_at
  ) = ($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
  WHERE id = $1
  RETURNING id, identity, model, vendor, serial_number, firmware_verion, modem_iccid, modem_imsi, meter_serial_number, meter_type, created_at, updated_at, status, password
`

type UpdateChargePointParams struct {
	ID                int64             `db:"id" json:"id"`
	Model             string            `db:"model" json:"model"`
	Vendor            string            `db:"vendor" json:"vendor"`
	SerialNumber      sql.NullString    `db:"serial_number" json:"serialNumber"`
	FirmwareVerion    sql.NullString    `db:"firmware_verion" json:"firmwareVerion"`
	ModemIccid        sql.NullString    `db:"modem_iccid" json:"modemIccid"`
	ModemImsi         sql.NullString    `db:"modem_imsi" json:"modemImsi"`
	MeterSerialNumber sql.NullString    `db:"meter_serial_number" json:"meterSerialNumber"`
	MeterType         sql.NullString    `db:"meter_type" json:"meterType"`
	Status            ChargePointStatus `db:"status" json:"status"`
	Password          []byte            `db:"password" json:"password"`
	UpdatedAt         time.Time         `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) UpdateChargePoint(ctx context.Context, arg UpdateChargePointParams) (ChargePoint, error) {
	row := q.db.QueryRowContext(ctx, updateChargePoint,
		arg.ID,
		arg.Model,
		arg.Vendor,
		arg.SerialNumber,
		arg.FirmwareVerion,
		arg.ModemIccid,
		arg.ModemImsi,
		arg.MeterSerialNumber,
		arg.MeterType,
		arg.Status,
		arg.Password,
		arg.UpdatedAt,
	)
	var i ChargePoint
	err := row.Scan(
		&i.ID,
		&i.Identity,
		&i.Model,
		&i.Vendor,
		&i.SerialNumber,
		&i.FirmwareVerion,
		&i.ModemIccid,
		&i.ModemImsi,
		&i.MeterSerialNumber,
		&i.MeterType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Password,
	)
	return i, err
}

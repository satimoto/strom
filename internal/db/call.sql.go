// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: call.sql

package db

import (
	"context"
	"time"
)

const createCall = `-- name: CreateCall :one
INSERT INTO calls (
    charge_point_id,
    req_id,
    action,
    created_at
  ) VALUES ($1, $2, $3, $4)
  RETURNING id, charge_point_id, req_id, action, created_at
`

type CreateCallParams struct {
	ChargePointID int64      `db:"charge_point_id" json:"chargePointID"`
	ReqID         string     `db:"req_id" json:"reqID"`
	Action        CallAction `db:"action" json:"action"`
	CreatedAt     time.Time  `db:"created_at" json:"createdAt"`
}

func (q *Queries) CreateCall(ctx context.Context, arg CreateCallParams) (Call, error) {
	row := q.db.QueryRowContext(ctx, createCall,
		arg.ChargePointID,
		arg.ReqID,
		arg.Action,
		arg.CreatedAt,
	)
	var i Call
	err := row.Scan(
		&i.ID,
		&i.ChargePointID,
		&i.ReqID,
		&i.Action,
		&i.CreatedAt,
	)
	return i, err
}

const getCallByReqID = `-- name: GetCallByReqID :one
SELECT id, charge_point_id, req_id, action, created_at FROM calls
  WHERE charge_point_id = $1 AND req_id = $2
`

type GetCallByReqIDParams struct {
	ChargePointID int64  `db:"charge_point_id" json:"chargePointID"`
	ReqID         string `db:"req_id" json:"reqID"`
}

func (q *Queries) GetCallByReqID(ctx context.Context, arg GetCallByReqIDParams) (Call, error) {
	row := q.db.QueryRowContext(ctx, getCallByReqID, arg.ChargePointID, arg.ReqID)
	var i Call
	err := row.Scan(
		&i.ID,
		&i.ChargePointID,
		&i.ReqID,
		&i.Action,
		&i.CreatedAt,
	)
	return i, err
}

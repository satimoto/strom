// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: id_tag.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createIDTag = `-- name: CreateIDTag :one
INSERT INTO id_tags (
    parent_id_tag_id,
    token, 
    status,
    created_at,
    updated_at
  ) VALUES ($1, $2, $3, $4, $5)
  RETURNING id, parent_id_tag_id, token, status, created_at, updated_at
`

type CreateIDTagParams struct {
	ParentIDTagID sql.NullInt64       `db:"parent_id_tag_id" json:"parentIDTagID"`
	Token         string              `db:"token" json:"token"`
	Status        AuthorizationStatus `db:"status" json:"status"`
	CreatedAt     time.Time           `db:"created_at" json:"createdAt"`
	UpdatedAt     time.Time           `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) CreateIDTag(ctx context.Context, arg CreateIDTagParams) (IDTag, error) {
	row := q.db.QueryRowContext(ctx, createIDTag,
		arg.ParentIDTagID,
		arg.Token,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i IDTag
	err := row.Scan(
		&i.ID,
		&i.ParentIDTagID,
		&i.Token,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIDTag = `-- name: GetIDTag :one
SELECT id, parent_id_tag_id, token, status, created_at, updated_at FROM id_tags
  WHERE id = $1
`

func (q *Queries) GetIDTag(ctx context.Context, id int64) (IDTag, error) {
	row := q.db.QueryRowContext(ctx, getIDTag, id)
	var i IDTag
	err := row.Scan(
		&i.ID,
		&i.ParentIDTagID,
		&i.Token,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIDTagByToken = `-- name: GetIDTagByToken :one
SELECT id, parent_id_tag_id, token, status, created_at, updated_at FROM id_tags
  WHERE token = $1
`

func (q *Queries) GetIDTagByToken(ctx context.Context, token string) (IDTag, error) {
	row := q.db.QueryRowContext(ctx, getIDTagByToken, token)
	var i IDTag
	err := row.Scan(
		&i.ID,
		&i.ParentIDTagID,
		&i.Token,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listIDTags = `-- name: ListIDTags :many
SELECT id, parent_id_tag_id, token, status, created_at, updated_at FROM id_tags
  ORDER BY id
`

func (q *Queries) ListIDTags(ctx context.Context) ([]IDTag, error) {
	rows, err := q.db.QueryContext(ctx, listIDTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IDTag
	for rows.Next() {
		var i IDTag
		if err := rows.Scan(
			&i.ID,
			&i.ParentIDTagID,
			&i.Token,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIDTag = `-- name: UpdateIDTag :one
UPDATE id_tags SET (
    parent_id_tag_id,
    status,
    updated_at
  ) = ($2, $3, $4)
  WHERE id = $1
  RETURNING id, parent_id_tag_id, token, status, created_at, updated_at
`

type UpdateIDTagParams struct {
	ID            int64               `db:"id" json:"id"`
	ParentIDTagID sql.NullInt64       `db:"parent_id_tag_id" json:"parentIDTagID"`
	Status        AuthorizationStatus `db:"status" json:"status"`
	UpdatedAt     time.Time           `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) UpdateIDTag(ctx context.Context, arg UpdateIDTagParams) (IDTag, error) {
	row := q.db.QueryRowContext(ctx, updateIDTag,
		arg.ID,
		arg.ParentIDTagID,
		arg.Status,
		arg.UpdatedAt,
	)
	var i IDTag
	err := row.Scan(
		&i.ID,
		&i.ParentIDTagID,
		&i.Token,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
